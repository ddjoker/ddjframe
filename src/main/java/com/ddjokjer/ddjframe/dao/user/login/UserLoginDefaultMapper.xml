<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ddjokjer.ddjframe.dao.user.login.UserLoginDefaultMapper">
  <resultMap id="BaseResultMap" type="com.ddjokjer.ddjframe.model.user.login.UserLoginDefault">
    <id column="usr_guid" jdbcType="VARCHAR" property="usrGuid"/>
    <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
    <result column="main_email" jdbcType="VARCHAR" property="mainEmail"/>
    <result column="phone" jdbcType="VARCHAR" property="phone"/>
    <result column="password" jdbcType="VARCHAR" property="password"/>
    <result column="reset_login" jdbcType="VARCHAR" property="resetLogin"/>
    <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
    <result column="created_dt" jdbcType="TIMESTAMP" property="createdDt"/>
    <result column="record_flag" jdbcType="VARCHAR" property="recordFlag"/>
    <result column="updated_by" jdbcType="VARCHAR" property="updatedBy"/>
    <result column="updated_dt" jdbcType="TIMESTAMP" property="updatedDt"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="("
                    separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="("
                    separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    usr_guid, login_name, main_email, phone, password, reset_login, created_by, created_dt,
    record_flag, updated_by, updated_dt
  </sql>
  <select id="selectByExample"
    parameterType="com.ddjokjer.ddjframe.model.user.login.UserLoginDefaultExample"
    resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from user_login_default
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user_login_default
    where usr_guid = #{usrGuid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    DELETE FROM user_login_default
    WHERE usr_guid = #{usrGuid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample"
    parameterType="com.ddjokjer.ddjframe.model.user.login.UserLoginDefaultExample">
    delete from user_login_default
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.ddjokjer.ddjframe.model.user.login.UserLoginDefault">
    INSERT INTO user_login_default (usr_guid, login_name, main_email,
                                    phone, password, reset_login,
                                    created_by, created_dt, record_flag,
                                    updated_by, updated_dt)
    VALUES
      (#{usrGuid,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, #{mainEmail,jdbcType=VARCHAR},
                                    #{phone,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                                    #{resetLogin,jdbcType=VARCHAR},
                                    #{createdBy,jdbcType=VARCHAR}, #{createdDt,jdbcType=TIMESTAMP},
                                    #{recordFlag,jdbcType=VARCHAR},
                                    #{updatedBy,jdbcType=VARCHAR}, #{updatedDt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective"
    parameterType="com.ddjokjer.ddjframe.model.user.login.UserLoginDefault">
    insert into user_login_default
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="usrGuid != null">
        usr_guid,
      </if>
      <if test="loginName != null">
        login_name,
      </if>
      <if test="mainEmail != null">
        main_email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="resetLogin != null">
        reset_login,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="createdDt != null">
        created_dt,
      </if>
      <if test="recordFlag != null">
        record_flag,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="updatedDt != null">
        updated_dt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="usrGuid != null">
        #{usrGuid,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null">
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="mainEmail != null">
        #{mainEmail,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="resetLogin != null">
        #{resetLogin,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdDt != null">
        #{createdDt,jdbcType=TIMESTAMP},
      </if>
      <if test="recordFlag != null">
        #{recordFlag,jdbcType=VARCHAR},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedDt != null">
        #{updatedDt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample"
    parameterType="com.ddjokjer.ddjframe.model.user.login.UserLoginDefaultExample"
    resultType="java.lang.Long">
    select count(*) from user_login_default
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_login_default
    <set>
      <if test="record.usrGuid != null">
        usr_guid = #{record.usrGuid,jdbcType=VARCHAR},
      </if>
      <if test="record.loginName != null">
        login_name = #{record.loginName,jdbcType=VARCHAR},
      </if>
      <if test="record.mainEmail != null">
        main_email = #{record.mainEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.resetLogin != null">
        reset_login = #{record.resetLogin,jdbcType=VARCHAR},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createdDt != null">
        created_dt = #{record.createdDt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.recordFlag != null">
        record_flag = #{record.recordFlag,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedDt != null">
        updated_dt = #{record.updatedDt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_login_default
    set usr_guid = #{record.usrGuid,jdbcType=VARCHAR},
    login_name = #{record.loginName,jdbcType=VARCHAR},
    main_email = #{record.mainEmail,jdbcType=VARCHAR},
    phone = #{record.phone,jdbcType=VARCHAR},
    password = #{record.password,jdbcType=VARCHAR},
    reset_login = #{record.resetLogin,jdbcType=VARCHAR},
    created_by = #{record.createdBy,jdbcType=VARCHAR},
    created_dt = #{record.createdDt,jdbcType=TIMESTAMP},
    record_flag = #{record.recordFlag,jdbcType=VARCHAR},
    updated_by = #{record.updatedBy,jdbcType=VARCHAR},
    updated_dt = #{record.updatedDt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective"
    parameterType="com.ddjokjer.ddjframe.model.user.login.UserLoginDefault">
    update user_login_default
    <set>
      <if test="loginName != null">
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="mainEmail != null">
        main_email = #{mainEmail,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="resetLogin != null">
        reset_login = #{resetLogin,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdDt != null">
        created_dt = #{createdDt,jdbcType=TIMESTAMP},
      </if>
      <if test="recordFlag != null">
        record_flag = #{recordFlag,jdbcType=VARCHAR},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedDt != null">
        updated_dt = #{updatedDt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where usr_guid = #{usrGuid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey"
    parameterType="com.ddjokjer.ddjframe.model.user.login.UserLoginDefault">
    UPDATE user_login_default
    SET login_name = #{loginName,jdbcType=VARCHAR},
      main_email   = #{mainEmail,jdbcType=VARCHAR},
      phone        = #{phone,jdbcType=VARCHAR},
      password     = #{password,jdbcType=VARCHAR},
      reset_login  = #{resetLogin,jdbcType=VARCHAR},
      created_by   = #{createdBy,jdbcType=VARCHAR},
      created_dt   = #{createdDt,jdbcType=TIMESTAMP},
      record_flag  = #{recordFlag,jdbcType=VARCHAR},
      updated_by   = #{updatedBy,jdbcType=VARCHAR},
      updated_dt   = #{updatedDt,jdbcType=TIMESTAMP}
    WHERE usr_guid = #{usrGuid,jdbcType=VARCHAR}
  </update>
</mapper>